---
categories: it
...

Systems programming language with compiler-provided safety guarantees.

Features:

* optional garbage collection (opt-in, per thread)
* ...

## Setup

~~~
sudo add-apt-repository ppa:hansjorg/rust
sudo apt-get update
sudo apt-get install rust-0.8
~~~

## Test program

Put sample code from Rust's website in a file `hello.rs`:

~~~ {.rust}
fn main() {
    let nums = [1, 2];
    let noms = ["Tim", "Eston", "Aaron", "Ben"];
 
    let mut odds = nums.iter().map(|&x| x * 2 - 1);
 
    for num in odds {
        do spawn {
            println!("{:s} says hello from a lightweight thread!", noms[num]);
        }
    }
}
~~~

then build with `rust build hello.rs`. This will produce executable `hello` in the same directory.

## Unit Testing

See [doc on github](https://github.com/mozilla/rust/wiki/Doc-unit-testing).

## Memory Ownership

Two types of pointers: 

* owned (`~int`)
* borrowed (`&int`)

When an owned pointer goes out of scope the memory it points to is freed.

## Traits

Like Haskell's typeclasses.

## References

* [introductory presentation](http://www.youtube.com/watch?v=gfCtbGiHcg0)
* [introduction](http://words.steveklabnik.com/a-30-minute-introduction-to-rust) by Steve Klabnik
* [a blog post](http://paulkoerbitz.de/posts/Understanding-Pointers-Ownership-and-Lifetimes-in-Rust.html) on ownership
