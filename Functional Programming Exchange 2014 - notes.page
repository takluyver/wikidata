

## A Practical Theory of Language-Integrated Query

*Philip Wadler*

Most important thing about functional languages: they are DSLs (for creating other DSLs). That is because lambda abstraction is built in and the way they work makes it easy to decompose problems. One of the first papers on FP: Landin's "the next 700 programming languages". Worth reading, as well as McCarthy's original Lisp paper.

* Links (the Links in Edinburgh; at the other end of the meadows from Hope; Hope is an early FP language) -- nice research project
* at the same time Erik Meijer et al. released LINQ -- working thing

How do you compare the two? Build a theory!

Table comparing -- F# 2, 3 and their theory: the theory always works and can be much faster, there is a theorem.

Rejected from DB conference as too theoretical.

Basic idea: **quotation**.

~~~ {.fsharp}
{people = [
	{name = "Alex", age = 60};
	{name = "Bert", age = 56};
	{name = "Cora", age = 33};
	{name = "Drew", age = 31};
	{name = "Edna", age = 21};
	{name = "Fred", age = 60};]}

type DB = {people: {name: string; age: int} list}

type Names = {name: string} list

let db: Expr<DB> = <@ database("People") @>
~~~

Problems with this representation:

* some databases don't fit in memory
* requires full scans

`<@ ... @>` is a quotation -- the parse tree of the expression between the brackets

`<@ database("People") @>` denotes expression that, if executed, reads in the entire database.

~~~ {.fsharp}
let range(a: int, b: int): Expr<Names> =
  <@ for w in (%db).people do
     if (%lift(a)) <= w.age && w.age < (%lift(b)) then
     yield {name: w.name} @>
~~~

now, `run(range(30, 40))` will produce something isomorphic to

~~~ {.sql}
select w.name as name
from people as w
where 30 <= w.age and w.age < 40
~~~

* `%` -- splice: inserts a parse tree at this place
* `lift` -- makes

More difficult in F#:

~~~ {.fsharp}
let satisfies: Expr<(int -> bool) -> Names> =
  <@ fun(p) -> for w in (%db).people do
     if p(w.age) then
     yield {name: w.name} @>
~~~

`run(<@(%satisfies)(fun(x) -> 30 <=x && x < 40))` produces the same query as before.

How about efficiency? We don't care -- the cost is in executing the query, not generating it. We should care about being able to clearly express the intent.

Aside: scala uses type-based quotation which are more fragile than direct quotations.

Now for something really cool: dynamic query generation.

~~~ {.fsharp}
type Predicate = 
  | Above of int
  | Below of int
  | And of Predicate * Predicate
  | Or of Predicate * Predicate
  | Not Predicate

let t_0: PRedicate = And(Above(30), Below(40))

let rec P(t: Predicate): Expr<int -> bool> =
  match t with
    | Above(a) -> <@ fun(x) -> (%lift(a)) <= x @>
    // ...
    | Not(t)   -> <@ fun(x) -> not(%P(t)(x)) @>
~~~

This is very, very hard in LINQ.

What our technique supports:

* Join queries
* Abstractioin over values
* Abstraction over predicates
* Composition of queries
* Dynamic gneeration of queries
* Nested intermediate data
* Compiling XPath to SQL

> Don't be afraid of maths. It's a candle in the darkness!

* closed quotation: `Expr<A -> B>` 
* open quotation: `Expr<A> -> Expr<B>`

Note: F# only has closed quotations:.

### Theory

* ordinary typing rules for lambda calculus plus `for`, `run` and `lift`, `database`, `antiquote`
* normalisation rules -- symbolic evaluation; well known rules, always terminate
* normalisation for ad-hoc rewriting (to generate legal SQL) -- need 
* theorem: if L has type A then ...

### Practice

Normalising the query never makes it worse. Published P-LINQ library.

### Q&A

* Erweb makes even stronger guarantees, but requires much more powerful type system

### Lesson

Quotations are amenable to static analysis and theoretical treatment.



## ParaForming: Forming Parallel Functional Programs Using Refactoring

*Kevin Hammond*

1985: 12-40 MHz
1993 Pentium: 60-300 MHz
2000: Pentium 4 1.3-3.6 GHz

-- frequency wall: power usage increases with cube of frequency. 4 GHz CPU never went into prod, 300 Watts

2006: Core Duo 1.8-3.33 GHz
2013: Xeon Phi: 60 cores at 1 GHz

### Near Future

* megacore, upt to millions of small cores
* with hundreds of dedicated lightweight integer units and separate floating point units. Likely to be heterogeneous.
* not even NUMA, no shared memory at all -- Xeon 5 has no shared memory; message passing between cores, each core running a mini-linux

Samsung Eynos 5 Octa: 8 cores, 4 of which are dark 4 are high-performance, 4 low performance

> If we don't solve the multicore challenge, then no other advances will matter!

3^8 threads created in 5 seconds on 16 core machine. 20k of them were actually executed.

Wrote the first parallel haskell compiler.

> Not every problem can't be prallelised

Really? (example with building a brick wall)

* Linear speedup is extremely hard to achieve (Amdahl's law)
* The trick to recognise dependencies and break them down to strong ones

How do we make programmers think parallel? New high level programming constructs for dealing with millions of threads.

* deadlocks must be eliminated by design
* preformance informatin must be included as part of the design -- we can't afford "correct first, optimal later"
* existing algorithms often don't parallelise well -- need to invent new ones from scratch

Bob Harper: The only thing that works for parallel is FP

concurrency: illusion; parallelism: the real thing

ParaForm:

identify components using semi-automatic refactoring
identify common patterns (TODO: photo)
data parallelism/task parallelism

Skel library for Erlang: fully nestable DSL for parallelism. Primitives such as 
* `pipe`
* `farm`

ParaPhrase: takes a program and transforms it into code that can be run on heterogeneous parallel machine.

Could be built into IDE: inspections that suggest transformation and refactorings to transform the code.

Example of Wrangler (Emacs-based Erlang refactoring tool).

* productivity improved 10-fold compared to manual refactoring while giving the same performance.

Dependent types allow us to use simple definition of aparllel skeletons at type level.

Implemented in Eclipse for C++(11)

Book on Skeleton-based approach in Haskell is in the works.

[http://www.paraphrase-ict.eu]()

[http://www.project-advance.eu]()


## Build Your Own Lisp for Great Justice

*Bodil Stoke*


## Data Science using FP

*Amanda Launcher*


## Teaching an Old Dog New Tricks: Wrapping Imperative API in a Functional One

*Chris Marshall*


## Railway Oriented Programming

*Scott Wlaschin*


## Mirage

*Anil Madhavapeddy*


## QuickChecking Riak

*John Hughes*

## Park Bench
